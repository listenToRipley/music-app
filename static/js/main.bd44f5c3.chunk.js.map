{"version":3,"sources":["serviceWorker.js","Components/NavBar.js","Components/Dashboard.js","LogIn.js","Router.js","index.js"],"names":["Boolean","window","location","hostname","match","NavBar","AppBar","position","Typography","variant","color","offlineNote","volumeNote","qualityNote","Dashboard","props","onlineHandler","e","console","log","state","message","preventDefault","setState","online","messages","messageIndex","indexOf","messageCopy","splice","slideHandler","v","currentVolumn","includes","qualityHandler","int","parseInt","target","value","quality","user","this","className","Card","CardContent","Switch","onClick","checked","Slider","onChange","defaultValue","step","marks","min","max","valueLabelDisplay","Select","MenuItem","map","item","i","key","Component","LogIn","clickHandler","username","alert","password","loggedIn","handleName","handlePassword","TextField","label","type","id","Button","Router","exact","path","component","Main","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.bd44f5c3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport ToolBar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst NavBar = () => {\n  return (\n    <AppBar position=\"static\">\n      <ToolBar>\n        <Typography variant=\"subtitle1\" color=\"inherit\">My Music App</Typography>\n      </ToolBar>\n    </AppBar>\n  )\n}\n\nexport default NavBar;","import React, {Component} from 'react'\nimport NavBar from './NavBar';\nimport {Card, CardContent, MenuItem, Switch, Slider, Select} from \"@material-ui/core\"\nimport './Dash.css'\n\nconst offlineNote = \"Your application is offline. You won't be able to share or stream music to other devices\"\nconst volumeNote =  \"Listening to music at a high volume could cause long-term hearing loss.\"\nconst qualityNote =  \"Music quality is degraded. Increase quality if your connection allows it.\"\n\nclass Dashboard extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      user: props.user,\n      online: true,\n      currentVolumn: 0,\n      quality: 2,\n      messages:[]\n    }\n  }\n\n  onlineHandler = (e) => {\n    console.log('before,', this.state.message)\n    e.preventDefault();\n    this.setState({\n      online: !this.state.online\n    }, () => {\n      if(this.state.online === false) {\n        this.setState({\n          messages: [...this.state.messages, offlineNote]\n        }) \n      } else if (this.state.online === true) {\n        let messageIndex = this.state.messages.indexOf(offlineNote)\n        let messageCopy = [...this.state.messages]\n          messageCopy.splice(messageIndex, 1)\n          this.setState({\n            messages: messageCopy\n        })\n      }\n    })\n    console.log('after,', this.state.messages)\n  }\n\n  slideHandler = (e, v) => {\n    e.preventDefault();\n    this.setState({\n      currentVolumn: v\n    }, () => {\n      if (this.state.currentVolumn >= 80 && (this.state.messages.includes(volumeNote) === false)) {\n        this.setState({\n          messages: [...this.state.messages, volumeNote]\n        }) \n      } else if (this.state.currentVolumn < 80) {\n        let messageIndex = this.state.messages.indexOf(volumeNote)\n        let messageCopy = [...this.state.messages]\n        messageCopy.splice(messageIndex, 1)\n        this.setState({\n          messages: messageCopy\n      })\n      }\n    })\n  }\n\n  qualityHandler = (e) => {\n    e.preventDefault();\n\n    let int = parseInt(e.target.value)\n    this.setState({\n      quality: int\n    }, () => {\n      if (this.state.quality === 1) {\n        this.setState({\n          messages: [...this.state.messages, qualityNote]\n        })\n      } else {\n        let messageIndex = this.state.messages.indexOf(qualityNote)\n        let messageCopy = [...this.state.messages]\n        messageCopy.splice(messageIndex, 1)\n        this.setState({\n          messages: messageCopy\n      })\n      }\n    })\n  }\n  \n  render() {\n    return(\n      <div>\n       <NavBar />\n        <h1>Welcome {this.state.user}</h1>\n\n       <div className=\"card-wrapper\">\n          <Card className=\"online\" variant=\"outlined\">\n              <CardContent>\n                <h1>Online Mode</h1>\n                <p>Is this application connected to the internet?</p>\n                 <Switch\n                   onClick={this.onlineHandler} \n                   checked={this.state.online}\n                   />\n              </CardContent>\n          </Card>\n\n          <Card className=\"volumn\" variant=\"outlined\">\n              <CardContent>\n                <h1>Master Volumn</h1>\n                <p>Overrides all other sound settings in this application</p>\n                  <Slider\n                    onChange={this.slideHandler}\n                    defaultValue={30}\n                    step={10}\n                    marks\n                    min={0}\n                    max={100}\n                    valueLabelDisplay=\"auto\"\n                  />\n              </CardContent>\n          </Card>\n              \n          <Card className=\"quality\" variant=\"outlined\">\n              <CardContent>\n                <h1>Sound Quality</h1>\n                <p>Manually control the music quality in the event of poor connection</p>\n                <Select onChange={this.qualityHandler} defaultValue={this.state.quality}>\n                  <MenuItem value=\"1\">Low</MenuItem>\n                  <MenuItem value=\"2\">Normal</MenuItem>\n                  <MenuItem value=\"3\">High</MenuItem>\n                </Select>\n              </CardContent>\n          </Card>\n       </div>\n\n       <h2>System Notifications</h2>\n        <ul>\n          {this.state.messages.map((item, i) => { return <li key={i}>{item}</li> })}\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default Dashboard","import React, {Component} from 'react';\nimport NavBar from './Components/NavBar';\nimport Dashboard from './Components/Dashboard';\nimport { Button, TextField , Card, CardContent } from '@material-ui/core';\nimport './App.css';\n\nclass LogIn extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      loggedIn: false,\n      username: '',\n      password: ''\n   };\n  };\n\n  clickHandler = (e) => {\n\n    if (this.state.username === '') {\n      alert(`You haven't entered a username yet`) \n    } else if (this.state.password === '') {\n      alert(`You must have a password`)\n    } else if (this.state.username !== '' && this.state.password !== '') {\n    this.setState({\n      loggedIn: !this.state.loggedIn,\n    })\n  }\n    console.log(this.state)\n  };\n\n  handleName = e => {\n      this.setState({\n        username: e.target.value,\n      })\n  }\n\n  handlePassword = e => {\n    this.setState({\n      password: e.target.value\n    })\n  }\n\n  render() { \n  \n    return this.state.loggedIn ? <Dashboard user={this.state.username}/> : (\n      <div>\n        <NavBar />\n          <Card className=\"logInCard\">\n            <CardContent>\n               <TextField onChange={this.handleName} label=\"Username *\" />\n               <br />\n               <TextField onChange={this.handlePassword} type=\"password\" id=\"outlined-password-input\" label=\"Password *\" />\n               <br />\n               <Button className=\"logInButton\" onClick={this.clickHandler}>Log In</Button>\n            </CardContent>\n          </Card>\n      </div>\n    )\n  }\n}\n\nexport default LogIn;","import React from 'react';\nimport {Switch, Route} from 'react-router';\nimport LogIn from './LogIn';\nimport Dashboard from './Components/Dashboard';\n\nconst Router = () => {\n  return(\n    <Switch>\n      <Route exact path=\"/\" component={LogIn}/>\n      <Route path=\"/dash\" component={Dashboard}/>\n    </Switch>\n  )\n}\n\nexport default Router; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Router from './Router'; \n\nconst Main = () => {\n  return (\n    <BrowserRouter>\n      <Router/>\n    </BrowserRouter>\n  )\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}